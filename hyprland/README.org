#+TITLE: Hyprland configuration

* Hyprlock
** Style
 #+BEGIN_SRC config :tangle .config/hypr/hyprlock.conf :mkdirp yes
# BACKGROUND
background {
    monitor =
    path = screenshot
    blur_passes = 2
    contrast = 0.8916
    brightness = 0.8172
    vibrancy = 0.1696
    vibrancy_darkness = 0.0
}

# GENERAL
general {
    grace = 0
    disable_loading_bar = true
}

# INPUT FIELD
input-field {
    monitor =
    size = 250, 60
    outline_thickness = 2
    dots_size = 0.2 # Scale of input-field height, 0.2 - 0.8
    dots_spacing = 0.2 # Scale of dots' absolute size, 0.0 - 1.0
    dots_center = true
    outer_color = rgba(0, 0, 0, 0)
    inner_color = rgba(0, 0, 0, 0.5)
    font_color = rgb(200, 200, 200)
    fade_on_empty = false
    placeholder_text = <i><span foreground="##cdd6f4">Input Password...</span></i>
    hide_input = false
    position = 0, 200
    halign = center
    valign = bottom
}

# TIME
label {
    monitor =
    text = cmd[update:1000] echo "$(date +"%-I:%M%p")"
    color = rgba(255, 255, 255, 0.6)
    font_size = 120
    font_family = SauceCodePro NF
    position = 0, -200
    halign = center
    valign = top
}
#+END_SRC

* Hyprpaper
 #+BEGIN_SRC config :tangle .config/hypr/hyprpaper.conf :mkdirp yes
# BACKGROUND
preload = ~/.wallpaper

wallpaper = ,~/.wallpaper

splash = false
#+END_SRC

* Hyprland
** Style
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
general {
    col.active_border = rgb(7c60a3)
    col.inactive_border = rgb(232530)
    col.nogroup_border = rgb(282a36)
    col.nogroup_border_active = rgb(7c60a3)
    no_border_on_floating = false
    resize_on_border = true
    border_size = 5
    gaps_in = 5
    gaps_out = 5
}

decoration {
    rounding = 10
    col.shadow = rgba(1E202900)
    blur {
        ignore_opacity = true
        passes = 2
    }
}

group {
    col.border_active = rgb(7c60a3)
    col.border_inactive = rgb(232530)
    groupbar {
        font_family = SauceCodePro NF Bold
        font_size = 12
        priority = 3
        height = 30
        col.active = rgb(7c60a3)
        col.inactive = rgba(232530cc)
    }
}
windowrulev2 = bordercolor rgb(ff5555),xwayland:1 # check if window is xwayland
windowrulev2 = opacity 1.0 0.85 1.0,class:(.*)
#+END_SRC

 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
# change monitor to high resolution, the last argument is the scale factor
monitor=,highres,auto,1

# unscale XWayland
xwayland {
  force_zero_scaling = true
}

# toolkit-specific scale
env = GDK_SCALE,1
env = XCURSOR_SIZE,32
#+END_SRC

 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
animation = windowsIn,0
animation = windowsOut,0

animation = border,0
#+END_SRC

 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
misc {
    disable_splash_rendering = 0
    disable_hyprland_logo = 0
    force_default_wallpaper = 0
}
#+END_SRC

** Bindings
*** Hyperkey setup
See https://wiki.hyprland.org/Configuring/Keywords/ for more

 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
$mainMod = SUPER
#+END_SRC

*** Compose key
    kb_variant = colemak_dh
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
input {
    kb_layout = us
    kb_options = compose:caps
}

#+END_SRC

*** Move focus with mainMod + vim keys
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
bind = $mainMod, b, movefocus, l
bind = $mainMod, f, movefocus, r
bind = $mainMod, p, movefocus, u
bind = $mainMod, n, movefocus, d

bind = $mainMod, O, focuscurrentorlast
bind = $mainMod SHIFT, O,cyclenext,prev
#+END_SRC

*** Moves the active window
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
bind = $mainMod SHIFT, b, movewindow, l
bind = $mainMod SHIFT, f, movewindow, r
bind = $mainMod SHIFT, p, movewindow, u
bind = $mainMod SHIFT, n, movewindow, d
#+END_SRC

*** Resizes the active window
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
binde = $mainMod SHIFT, bracketleft, resizeactive, -60 0
binde = $mainMod SHIFT, bracketright, resizeactive, 60 0
binde = $mainMod SHIFT, V, resizeactive, 0 -60
binde = $mainMod, V, resizeactive, 0 60
#+END_SRC

*** Tabs
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
bind= $mainMod ALT, TAB, togglegroup,
binde= $mainMod SHIFT, TAB, changegroupactive, b
binde= $mainMod, TAB, changegroupactive, f
bind= $mainMod, q, moveoutofgroup,
bind= $mainMod ALT, b, moveintogroup, l
bind= $mainMod ALT, p, moveintogroup, u
bind= $mainMod ALT, n, moveintogroup, d
bind= $mainMod ALT, f, moveintogroup, r
#+END_SRC

Those are a necessity when xremap and global emacs mapping is enabled.
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
bind= $mainMod CTRL, left, moveintogroup, l
bind= $mainMod CTRL, up, moveintogroup, u
bind= $mainMod CTRL, down, moveintogroup, d
bind= $mainMod CTRL, right, moveintogroup, r
#+END_SRC

*** Switch workspaces with mainMod + [0-9]
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10
#+END_SRC

*** Move active window to a workspace with mainMod + SHIFT + [0-9]
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10
#+END_SRC

*** Send active window to a workspace siltently with mainMod + CTRL + [0-9]
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
bind = $mainMod CTRL, 1, movetoworkspacesilent, 1
bind = $mainMod CTRL, 2, movetoworkspacesilent, 2
bind = $mainMod CTRL, 3, movetoworkspacesilent, 3
bind = $mainMod CTRL, 4, movetoworkspacesilent, 4
bind = $mainMod CTRL, 5, movetoworkspacesilent, 5
bind = $mainMod CTRL, 6, movetoworkspacesilent, 6
bind = $mainMod CTRL, 7, movetoworkspacesilent, 7
bind = $mainMod CTRL, 8, movetoworkspacesilent, 8
bind = $mainMod CTRL, 9, movetoworkspacesilent, 9
bind = $mainMod CTRL, 0, movetoworkspacesilent, 10
#+END_SRC

*** Scroll through existing workspaces with mainMod + scroll
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1
#+END_SRC

*** Move/resize windows with mainMod + LMB/RMB and dragging
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow
#+END_SRC

*** Window states
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
bind = $mainMod, M, togglefloating,
bind = $mainMod CTRL, M, pin,
bind = $mainMod SHIFT, M, fullscreen
#+END_SRC

*** Kill selected window
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
bind = $mainMod, k, killactive,
#+END_SRC

*** Lock screen
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
bind = $mainMod, l, exec, hyprlock
#+END_SRC

*** Waybar
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
bind = $mainMod, apostrophe, exec, if pidof waybar; then pkill waybar; else waybar; fi
#+END_SRC

*** Handle media keys
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
bindl = , XF86AudioPlay, exec, playerctl play-pause
bindl = , XF86AudioNext, exec, playerctl next
bindl = , XF86AudioPrev, exec, playerctl previous
bindl = , XF86AudioMute, exec, pamixer -t
bindle = , XF86AudioRaiseVolume, exec, pamixer -i 2
bindle = , XF86AudioLowerVolume, exec, pamixer -d 2
#+END_SRC

***
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
bindl = $mainMod, s, exec, if pidof wf-recorder; then pkill -SIGINT wf-recorder; else grim -g "$(slurp)" - | swappy -f -; fi
bindl = $mainMod SHIFT, s, exec, if pidof wf-recorder; then pkill -SIGINT wf-recorder; else rm -f ~/recording.mkv && wf-recorder -g "$(slurp)"; fi
#+END_SRC

*** Applications
Example binds, see https://wiki.hyprland.org/Configuring/Binds/ for more
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
bind = $mainMod SHIFT, Return, exec, alacritty
bind = $mainMod, Return, exec, if ! pidof emacs; then bash -l -c 'emacs --daemon'; fi; emacsclient -c -n -e '(eshell/new-or-current)'

bind = $mainMod, X, exec, wofi --show drun

bind = $mainMod, E, exec, if ! pidof emacs; then bash -l -c 'emacs --daemon'; fi; emacsclient -c -n -e '(switch-to-buffer (window-buffer (selected-window)))'
bind = $mainMod SHIFT, E, exec, if ! pidof emacs; then bash -l -c 'emacs --daemon'; fi; emacsclient -c -n -e '(switch-to-buffer nil)'

bind = $mainMod, J, exec, if ! pidof emacs; then bash -l -c 'emacs --daemon'; fi; emacsclient -c -n -e '(with-current-buffer (window-buffer (selected-window)) (dired-jump))'

bind = $mainMod, I, exec, qutebrowser
bind = $mainMod SHIFT, I, exec, if ! pidof emacs; then bash -l -c 'emacs --daemon'; fi; emacsclient -c -n -e '(eww "https://www.google.com")'

bind = $mainMod, t, exec, if [[ $(hyprctl activewindow -j | jq .class) == '"Logseq"' ]]; then hyprctl dispatch movetoworkspacesilent 666,Logseq; else if [[ "$(hyprctl clients | grep Logseq)" == "" ]]; then bash -l -c 'logseq'; fi; hyprctl dispatch movetoworkspace $(hyprctl activeworkspace -j | jq '.id'),Logseq; hyprctl dispatch focuswindow Logseq; fi
bind = $mainMod SHIFT, t, exec, hyprctl dispatch workspace 666;if [[ "$(hyprctl clients | grep Logseq)" == "" ]]; then bash -l -c 'logseq'; fi;

bind = $mainMod, C, exec, logseq
#+END_SRC

** Starting Applications
 #+BEGIN_SRC config :tangle .config/hypr/hyprland.conf :mkdirp yes
exec-once = hyprpaper
exec-once = waybar
exec-once = systemctl --user start xremap
exec-once = nm-applet --indicator

exec-once = bash -l -c "gsettings set org.gnome.desktop.interface gtk-theme 'Dracula'"
exec-once = bash -l -c "gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'"

exec-once = bash -l -c 'emacs --daemon'
#+END_SRC
