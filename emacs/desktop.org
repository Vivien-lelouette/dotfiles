#+title Destkop with exwm configuration
#+PROPERTY: header-args:emacs-lisp :tangle .emacs.d/desktop.el :mkdirp yes

* Window Management
** Monitor management
Those functions will organize 10 workspaces according to your monitors relative positions.
Workspace 1 & 2 will be allocated to the most left monitor, the 3 & 4 to the one on its right, etc. The most right monitor will have the rest of the workspaces.

#+begin_src emacs-lisp

  (defun car-string-to-number (list-two-elements)
    (append (list (string-to-number (car list-two-elements))) (cdr list-two-elements))
    )

  (defun sort-from-car (a b)
    (< (car a) (car b))
    )

  (defun xrandr-active-monitors ()
    (mapcar 'car-string-to-number
            (remove nil
                    (mapcar 'split-string
                            (split-string
                             (shell-command-to-string "xrandr --listactivemonitors | grep / | cut -d '/' -f3 | sed -e 's/^[0-9]\\++//g' -e 's/+[0-9]\\+//g'")
                             "\n")
                            )
                    )
            )
    )

  (defun order-monitors ()
    (apply #'append
           (mapcar 'cdr
                   (sort
                    (xrandr-active-monitors)
                    'sort-from-car
                    )
                   )
           )
    )

  (defun build-workspace-monitor (monitor current_workspace max_workspace)
    (if (> current_workspace max_workspace)
        '()
      (append (list current_workspace monitor) (build-workspace-monitor monitor (+ current_workspace 1) max_workspace))
      )
    )

  (defun build-exwm-monitors-aux (current_workspace monitor-list)
    (cond
     ((equal (length monitor-list) 1)
      (list 9 (car monitor-list) 0 (car monitor-list))
      )
     ((equal (length monitor-list) 2)
      (append (build-workspace-monitor (car monitor-list) current_workspace 8) (build-exwm-monitors-aux (+ current_workspace 2) (cdr monitor-list)))
      )
     (t
      (append (build-workspace-monitor (car monitor-list) current_workspace (+ current_workspace 1)) (build-exwm-monitors-aux (+ current_workspace 2) (cdr monitor-list)))
      )
     )
    )

  (defun build-exwm-monitors ()
    (build-exwm-monitors-aux 1 (order-monitors)))

#+end_src

** EXWM Configuration

We use the excellent [[https://github.com/ch11ng/exwm][EXWM]] module as the basis for our Emacs Desktop Environment.  The [[https://github.com/ch11ng/exwm/wiki][EXWM Wiki]] is a great place to find tips about how to configure everything!

*NOTE:* Make sure you've installed =nm-applet=, =pasystray= and =blueman= for the system tray apps to work!

#+begin_src emacs-lisp

  (defun efs/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  (defun efs/set-wallpaper ()
    (interactive)
    ;; NOTE: You will need to update this to a valid background path!
    (start-process-shell-command
     "feh" nil  "feh --bg-scale /usr/share/backgrounds/matt-mcnulty-nyc-2nd-ave.jpg"))

  (defun efs/exwm-init-hook ()
    ;; Make workspace 1 be the one where we land at startup
    (exwm-workspace-switch-create 1)

    ;; Start the Polybar panel
    (efs/start-panel)

    ;; Launch apps that will run in the background
    (efs/run-in-background "nm-applet")
    (efs/run-in-background "pasystray")
    (efs/run-in-background "blueman-applet"))

  (defun efs/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (defun efs/exwm-update-title ()
    (pcase exwm-class-name
      ("Firefox" (exwm-workspace-rename-buffer (format "Firefox: %s" exwm-title)))))

  ;; This function should be used only after configuring autorandr!
  (defun efs/update-displays ()
    (efs/run-in-background "autorandr --change --force")
    (efs/set-wallpaper)
    (message "Display config: %s"
             (string-trim (shell-command-to-string "autorandr --current"))))

  ;; The next functions are tools to easily switch buffer
  ;; only switch to next relevant buffer
  (defcustom my-skippable-buffer-regexp
    (rx bos (or (seq "*" (zero-or-more anything))
                (seq "magit" (zero-or-more anything))
                (seq "qutebrowser" (zero-or-more anything))
                (seq "Firefox" (zero-or-more anything)))
        eos)
    "Matching buffer names are ignored by `my-next-buffer'
      and `my-previous-buffer'."
    :type 'regexp)

  ;; only switch to next relevant buffer
  (defcustom my-browser-buffer-regexp
    (rx bos (or (seq "qutebrowser" (zero-or-more anything))
                (seq "Firefox" (zero-or-more anything)))
        eos)
    "Matching only browser windows"
    :type 'regexp)

  (defun my-change-buffer (change-buffer buffer-to-skip)
    "Call CHANGE-BUFFER until `buffer-to-skip' doesn't match."
    (let ((initial (current-buffer)))
      (funcall change-buffer)
      (let ((first-change (current-buffer)))
        (catch 'loop
          (while (funcall buffer-to-skip)
            (funcall change-buffer)
            (when (eq (current-buffer) first-change)
              (switch-to-buffer initial)
              (throw 'loop t)))))))

  (defun my-next-buffer ()
    "Variant of `next-buffer' that skips `my-skippable-buffer-regexp'."
    (interactive)
    (my-change-buffer 'next-buffer (lambda () (string-match-p my-skippable-buffer-regexp (buffer-name)))))

  (defun my-previous-buffer ()
    "Variant of `previous-buffer' that skips `my-skippable-buffer-regexp'."
    (interactive)
    (my-change-buffer 'previous-buffer (lambda () (string-match-p my-skippable-buffer-regexp (buffer-name)))))

  (defun my-next-browser ()
    "Variant of `next-buffer' that skips `my-skippable-buffer-regexp'."
    (interactive)
    (my-change-buffer 'next-buffer (lambda () (not (string-match-p my-browser-buffer-regexp (buffer-name))))))

  (defun my-previous-browser ()
    "Variant of `previous-buffer' that skips `my-skippable-buffer-regexp'."
    (interactive)
    (my-change-buffer 'previous-buffer (lambda () (not (string-match-p my-browser-buffer-regexp (buffer-name))))))

  ;; split and move to the new split
  (defun my-window-vsplit ()
    (interactive)
    (evil-window-vsplit)
    (balance-windows)
    (run-at-time "0.1 seconds" nil (lambda ()
                                     (windmove-right))))

  (defun my-window-split ()
    (interactive)
    (evil-window-split)
    (run-at-time "0.1 seconds" nil (lambda ()
                                     (windmove-down))))

  ;; logout function
  (defun my-logout ()
    (interactive)
    (shell-command "gnome-screensaver-command -l"))

  (use-package exwm
    :config
    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)

    ;; When window title updates, use it to set the buffer name
    (add-hook 'exwm-update-title-hook #'efs/exwm-update-title)

    ;; When EXWM starts up, do some extra confifuration
    (add-hook 'exwm-init-hook #'efs/exwm-init-hook)

    ;; Rebind CapsLock to Esc
    (start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/exwm/Xmodmap")

    ;; NOTE: Uncomment the following two options if you want window buffers
    ;;       to be available on all workspaces!

    ;; Automatically move EXWM buffer to current workspace when selected
    ;; (setq exwm-layout-show-all-buffers t)

    ;; Display all EXWM buffers in every workspace buffer list
    (setq exwm-workspace-show-all-buffers t)

    ;; NOTE: Uncomment this option if you want to detach the minibuffer!
    ;; Detach the minibuffer (show it with exwm-workspace-toggle-minibuffer)
    ;;(setq exwm-workspace-minibuffer-position 'top)

    ;; Set the screen resolution (update this to be the correct resolution for your screen!)
    (require 'exwm-randr)
    (exwm-randr-enable)

    ;; This defines a function to refresh the workspaces position and xrandr
    (defun refresh-monitors ()
      (interactive)
      (setq exwm-randr-workspace-monitor-plist (build-exwm-monitors))
      (exwm-randr-refresh)
      )

    ;; NOTE: Uncomment these lines after setting up autorandr!
    ;; React to display connectivity changes, do initial display update
    ;; (add-hook 'exwm-randr-screen-change-hook #'efs/update-displays)
    ;; (efs/update-displays)

    ;; Set the wallpaper after changing the resolution
    ;; (efs/set-wallpaper)

    ;; Automatically send the mouse cursor to the selected workspace's display
    (setq exwm-workspace-warp-cursor t)

    ;; Ctrl+Q will enable the next key to be sent directly
    ;; (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)


    ;; Set up global key bindings.  These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
          `(
            ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
            ([?\s-r] . exwm-reset)

            ;; refresh monitors
            ([?\s-D] . refresh-monitors)

            ([?\s-=] . balance-windows)
            ([?\s-+] . zoom)
            ([?\s-G] . zoom-mode)

            ;; move to another window using switch-window
            ([?\s-o] . switch-window)

            ;; easy window switching
            ([?\s-h] . evil-window-left)
            ([?\s-k] . evil-window-up)
            ([?\s-j] . evil-window-down)
            ([?\s-l] . evil-window-right)

            ([s-left] . evil-window-left)
            ([s-up] . evil-window-up)
            ([s-down] . evil-window-down)
            ([s-right] . evil-window-right)

            ;; easy window moving
            ([?\s-H] . +evil/window-move-left)
            ([?\s-J] . +evil/window-move-down)
            ([?\s-K] . +evil/window-move-up)
            ([?\s-L] . +evil/window-move-right)

            ([S-s-left] . +evil/window-move-left)
            ([S-s-down] . +evil/window-move-down)
            ([S-s-up] . +evil/window-move-up)
            ([S-s-right] . +evil/window-move-right)

            ;; easy window resize
            ;; ([C-s-h] . windsize-left)
            ;; ([C-s-j] . windsize-down)
            ;; ([C-s-k] . windsize-up)
            ;; ([C-s-l] . windsize-right)

            ([C-s-left] . windsize-left)
            ([C-s-down] . windsize-down)
            ([C-s-up] . windsize-up)
            ([C-s-right] . windsize-right)

            ([?\s-V] . my-window-vsplit)
            ([?\s-S] . my-window-split)

            ([?\s-b] . exwm-workspace-switch-to-buffer)
            ([?\s-B] . ibuffer)

            ([s-tab] . my-next-buffer)
            ([s-iso-lefttab] . my-previous-buffer)

            ([?\s-i] . my-next-browser)
            ([?\s-I] . my-previous-browser)

            ([?\s-p] . +treemacs/toggle)

            ([?\s-W] . delete-window)
            ([?\s-X] . kill-current-buffer)
            ([?\s-Q] . (lambda () (interactive) (kill-current-buffer) (delete-window)))

            ([?\s-f] . exwm-layout-toggle-fullscreen)
            ([?\s-F] . exwm-floating-toggle-floating)

            ([?\s-T] . my-logout)
            ([?\s-x] . counsel-M-x)
            ([?\s-.] . counsel-find-file)

            ([?\s- ] . counsel-linux-app)
            ([s-return] . +vterm/toggle)
            ([S-s-return] . +vterm/here)

            ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))
            ))

    ;; Should be set in the previous list but does not work atm
    (exwm-input-set-key (kbd "C-s-h") #'windsize-left)
    (exwm-input-set-key (kbd "C-s-l") #'windsize-right)
    (exwm-input-set-key (kbd "C-s-j") #'windsize-down)
    (exwm-input-set-key (kbd "C-s-k") #'windsize-up)

    (exwm-enable))

#+end_src

* Desktop Environment
** Desktop File

This file is used by your "login manager" (GDM, LightDM, etc) to display EXWM as a desktop environment option when you log in.

*IMPORTANT*: Make sure you create a symbolic link for this file into =/usr/share/xsessions=:

#+begin_src shell :tangle .scripts/emacs/init-ubuntu.sh :mkdirp yes

  echo "[Desktop Entry]
    Name=EXWM
    Comment=Emacs Window Manager
    Exec=sh $(pwd ~)/.emacs.d/exwm/start-exwm.sh
    TryExec=sh
    Type=Application
    X-LightDM-DesktopName=exwm
    DesktopNames=exwm" > ~/.emacs.d/exwm/EXWM.desktop

  sudo ln -f ~/.emacs.d/exwm/EXWM.desktop /usr/share/xsessions/EXWM.desktop

#+end_src

** Desktop Key Bindings

We use the [[https://github.com/DamienCassou/desktop-environment][desktop-environment]] package to automatically bind to well-known programs for controlling the volume, screen brightness, media playback, and doing other things like locking the screen and taking screenshots.  Make sure that you install the necessary programs to make this functionality work!  Check the [[https://github.com/DamienCassou/desktop-environment#default-configuration][default programs]] list to know what you need to install.

#+begin_src emacs-lisp

  (use-package desktop-environment
    :after exwm
    :config (desktop-environment-mode)
    :custom
    (desktop-environment-brightness-small-increment "2%+")
    (desktop-environment-brightness-small-decrement "2%-")
    (desktop-environment-brightness-normal-increment "5%+")
    (desktop-environment-brightness-normal-decrement "5%-"))

#+end_src

** Launcher Script

This launcher script is invoked by =EXWM.desktop= to start Emacs and load our desktop environment configuration.  We also start up some other helpful applications to configure the desktop experience.

#+begin_src shell :tangle ./.emacs.d/exwm/start-exwm.sh :shebang #!/bin/sh :mkdirp yes

  # Run the screen compositor
  compton &

  # Fire it up
  exec dbus-launch --exit-with-session emacs -mm --debug-init -l ~/.emacs.d/desktop.el

#+end_src

** Keyboard Configuration

The =Xmodmap= file will be used with the =xmodmap= program to remap CapsLock to Esc inside of our desktop environment:

#+begin_src sh :tangle ./.emacs.d/exwm/Xmodmap

  remove Lock = Caps_Lock
  keysym Caps_Lock = Escape
  add Lock = Caps_Lock'

#+end_src

** Panel with Polybar
*** Prerequisite
**** Ubuntu
Install useful tray apps:
#+begin_src emacs-lisp  :tangle .scripts/polybar/inint-ubuntu.sh :shebang #!/bin/sh :mkdirp yes

  sudo apt install pasystray blueman
  sudo apt install build-essential git cmake cmake-data pkg-config python3-sphinx libcairo2-dev libxcb1-dev libxcb-util0-dev libxcb-randr0-dev libxcb-composite0-dev python3-xcbgen xcb-proto libxcb-image0-dev libxcb-ewmh-dev libxcb-icccm4-dev

#+end_src

Compile and install polybar:
#+begin_src shell :tangle .scripts/polybar/install.sh :shebang #!/bin/sh :mkdirp yes

  mkdir -p ~/Tools
  cd ~/Tools
  git clone --recursive https://github.com/polybar/polybar
  cd polybar
  mkdir build
  cd build
  cmake ..
  make -j$(nproc)
  # Optional. This will install the polybar executable in /usr/local/bin
  sudo make install

#+end_src

*** Polybar config

Polybar provides a great, minimalistic panel for your EXWM desktop configuration.  The following config integrates =emacsclient= and Polybar with =polybar-msg= to enable you to gather *any* information from Emacs and display it in the panel!

Check out the Polybar wiki for more details on how to configure it: https://github.com/polybar/polybar/wiki

#+begin_src emacs-lisp

  ;; Make sure the server is started (better to do this in your main Emacs config!)
  (server-start)

  (defvar efs/polybar-process nil
    "Holds the process of the running Polybar instance, if any")

  (defun efs/kill-panel ()
    (interactive)
    (when efs/polybar-process
      (ignore-errors
        (kill-process efs/polybar-process)))
    (setq efs/polybar-process nil))

  (defun efs/start-panel ()
    (interactive)
    (efs/kill-panel)
    (setq efs/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))

  (defun efs/send-polybar-hook (module-name hook-index)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun efs/send-polybar-exwm-workspace ()
    (efs/send-polybar-hook "exwm-workspace" 1))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'efs/send-polybar-exwm-workspace)

#+end_src

The configuration for our ingeniously named panel, "panel".  Invoke it with =polybar panel= on the command line!

#+begin_src conf :tangle ~/.config/polybar/config :mkdirp yes

  ; Docs: https://github.com/polybar/polybar
  ;==========================================================

  [settings]
  screenchange-reload = true

  [global/wm]
  margin-top = -18px
  margin-bottom = 0

  [colors]
  background = #f0252526
  background-alt = #001e1e1e
  foreground = #d4d4d4
  foreground-alt = #555
  primary = #ffb52a
  secondary = #e60053
  alert = #bd2c40
  underline-1 = #c792ea

  [bar/panel]
  monitor = ${env:MONITOR:}
  bottom = true
  width = 600
  height = 18
  offset-x = 100%:-600
  offset-y = 0px
  fixed-center = true
  enable-ipc = true

  background = ${colors.background}
  foreground = ${colors.foreground}

  border-size = 0
  border-color = #00000000

  padding-top = 5
  padding-left = 1
  padding-right = 1

  module-margin = 3

  font-0 = "Cantarell:size=12;2"
  font-1 = "Font Awesome:size=10;2"
  font-2 = "Material Icons:size=14;5"
  font-3 = "Fira Mono:size=9;-3"

  modules-right = date battery

  tray-detached = true
  tray-position = right
  tray-padding = 3
  tray-maxsize = 28
  tray-offset-x = -290

  cursor-click = pointer
  cursor-scroll = ns-resize

  [module/cpu]
  type = internal/cpu
  interval = 2
  format = <label> <ramp-coreload>
  format-underline = ${colors.underline-1}
  click-left = emacsclient -e "(proced)"
  label = %percentage:2%%
  ramp-coreload-spacing = 0
  ramp-coreload-0 = ▁
  ramp-coreload-0-foreground = ${colors.foreground-alt}
  ramp-coreload-1 = ▂
  ramp-coreload-2 = ▃
  ramp-coreload-3 = ▄
  ramp-coreload-4 = ▅
  ramp-coreload-5 = ▆
  ramp-coreload-6 = ▇

  [module/date]
  type = internal/date
  interval = 5

  date = "%a %b %d %Y"

  time = %H:%M

  format-prefix-foreground = ${colors.foreground-alt}
  format-underline = ${colors.underline-1}

  label = %date% %time%

  [module/battery]
  type = internal/battery
  battery = BAT1
  adapter = ADP1
  full-at = 98
  time-format = %-l:%M

  label-charging = %percentage%%
  format-charging = <animation-charging> <label-charging>
  format-charging-underline = ${colors.underline-1}

  label-discharging = %percentage%%
  format-discharging = <ramp-capacity> <label-discharging>
  format-discharging-underline = ${self.format-charging-underline}

  format-full = <ramp-capacity> <label-full>
  format-full-underline = ${self.format-charging-underline}

  ramp-capacity-0 = 
  ramp-capacity-1 = 
  ramp-capacity-2 = 
  ramp-capacity-3 = 
  ramp-capacity-4 = 

  animation-charging-0 = 
  animation-charging-1 = 
  animation-charging-2 = 
  animation-charging-3 = 
  animation-charging-4 = 
  animation-charging-framerate = 750

  [module/temperature]
  type = internal/temperature
  thermal-zone = 0
  warn-temperature = 60

  format = <label>
  format-underline = ${colors.underline-1}
  format-warn = <label-warn>
  format-warn-underline = ${self.format-underline}

  label = %temperature-c%
  label-warn = %temperature-c%!
  label-warn-foreground = ${colors.secondary}

#
